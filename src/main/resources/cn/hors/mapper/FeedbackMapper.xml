<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.hors.mapper.FeedbackMapper">
  <resultMap id="BaseResultMap" type="cn.hors.bean.Feedback">
    <!--@mbg.generated-->
    <!--@Table feedback-->
    <id column="back_id" jdbcType="INTEGER" property="backId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="doctor_id" jdbcType="INTEGER" property="doctorId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="back_time" jdbcType="DATE" property="backTime" />
    <result column="reply" jdbcType="VARCHAR" property="reply" />
    <result column="reply_time" jdbcType="DATE" property="replyTime" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    back_id, user_id, doctor_id, content, back_time, reply, reply_time
  </sql>
  <select id="findByUsId" resultMap="BaseResultMap">
   select <include refid="Base_Column_List" />
   from feedback where user_id=#{userId,jdbcType=INTEGER}
</select>
<insert id="insertFeed" keyColumn="back_id" keyProperty="backId" parameterType="cn.hors.bean.Feedback" useGeneratedKeys="true">
 insert into feedback
 <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="backId != null">
        back_id,
      </if>
      <if test="userId != null and userId != ''">
        user_id,
      </if>
      <if test="doctorId != null and doctorId != ''">
        doctor_id,
      </if>
      <if test="content != null and content != ''">
        content,
      </if>
      <if test="backTime != null and backTime != ''">
        back_time,
      </if>
      <if test="reply != null and reply!=''">
        reply,
      </if>
      <if test="replyTime != null and replyTime!=''">
        reply_time
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="backId != null">
        #{backId,jdbcType=INTEGER},
      </if>
      <if test="userId != null and userId != ''">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null and doctorId != ''">
        #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="content != null and content != ''">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="backTime != null and backTime != ''">
        #{backTime,jdbcType=DATE},
      </if>
      <if test="reply != null and reply != ''">
        #{reply,jdbcType=VARCHAR},
      </if>
      <if test="replyTime != null and replyTime != ''">
        #{replyTime,jdbcType=DATE},
      </if>
    </trim>
</insert>
    <update id="updateFeed">
        update feedback
        <set>
              <if test="backId != null">
                back_id = #{backId,jdbcType=INTEGER},
              </if>
              <if test="userId != null and userId != ''">
                user_id = #{userId,jdbcType=INTEGER},
              </if>
              <if test="doctorId != null and doctorId != ''">
                doctor_id = #{doctorId,jdbcType=INTEGER},
              </if>
              <if test="content != null and content != ''">
                content = #{content,jdbcType=VARCHAR},
              </if>
              <if test="backTime != null">
                back_time = now(),
              </if>
              <if test="reply != null and reply != ''">
                reply = #{reply,jdbcType=VARCHAR},
              </if>
              <if test="reply != null and reply != ''">
                reply_time = now(),
              </if>
        </set>
        where back_id = #{backId,jdbcType=INTEGER}
    </update>

<sql id="BASIC_WHERE">
    <if test="backId != null">
        and back_id = #{backId}
    </if>
    <if test="userId != null">
        and user_id = #{userId}
    </if>
    <if test="doctorId != null">
        and doctor_id = #{doctorId}
    </if>
    <if test="content != null and content != ''">
        and content = #{content}
    </if>
    <if test="backTime != null">
        and back_time=#{backTime}
    </if>
    <if test="reply != null and reply != ''">
        and reply = #{reply}
    </if>
    <if test="replyTime != null">
        and reply_time=#{replyTime}
    </if>
</sql>

<sql id="Base_Insert_Colume">
     <trim suffixOverrides=",">
        <if test="backId != null">
              back_id,
    </if>
    <if test="userId != null">
              user_id,
    </if>
    <if test="doctorId != null">
              doctor_id,
    </if>
    <if test="content != null and content != ''">
              content,
    </if>
    <if test="backTime != null">
              back_time,
    </if>
    <if test="reply != null and reply != ''">
              reply,
    </if>
    <if test="replyTime != null">
              reply_time,
    </if>
     </trim>
</sql>

<sql id="Base_Insert_Value">
    <trim suffixOverrides=",">
        <if test="backId != null">
                #{backId},
    </if>
    <if test="userId != null">
               #{userId},
    </if>
    <if test="doctorId != null">
                #{doctorId},
    </if>
    <if test="content != null and content != ''">
                #{content},
    </if>
    <if test="backTime != null">
                #{backTime},
    </if>
    <if test="reply != null and reply != ''">
                #{reply},
    </if>
    <if test="replyTime != null">
                #{replyTime},
    </if>
    </trim>
</sql>

<sql id="Base_Update">
    <trim suffixOverrides=",">
        <if test="backId != null">
             back_id = #{backId},
        </if>
        <if test="userId != null">
             user_id = #{userId},
        </if>
        <if test="doctorId != null">
             doctor_id = #{doctorId},
        </if>
        <if test="content != null and content != ''">
             content = #{content},
        </if>
        <if test="backTime != null">
             back_time=#{backTime},
        </if>
        <if test="reply != null and reply != ''">
             reply = #{reply},
        </if>
        <if test="replyTime != null">
             reply_time=#{replyTime},
        </if>
    </trim>
</sql>

    <select id="findAll" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" />
            from feedback
            <where>
                <include refid="BASIC_WHERE" />
            </where>
    </select>

    <insert id="insert">
        insert into feedback (<include refid="Base_Insert_Colume" />)
        values (<include refid="Base_Insert_Value" />)
    </insert>

    <update id="update">
        update feedback
        <set>
            <include refid="Base_Update" />
        </set>
        where back_id = #{backId}
    </update>

    <delete id="deleteByIds">
    delete from feedback
    <where>
    <foreach close=")" collection="ids" item="backId" open="back_id in (" separator=",">
    #{backId}
</foreach>
</where>
</delete>

</mapper>